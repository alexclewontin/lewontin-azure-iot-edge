###############################################################################
#                      IoT Edge Daemon configuration
###############################################################################
#
# This file configures the IoT Edge daemon. The daemon must be restarted to
# pick up any configuration changes.
#
# Note - this file is yaml. Learn more here: http://yaml.org/refcard.html
#
###############################################################################

# ==============================================================================
# Elevated Docker Permissions Flag
# ==============================================================================
#
# Some docker capabilities can be used to gain root access. 
# By default, the --privileged flag and all capabilities listed in the CapAdd
# field of the docker HostConfig are allowed.
#
# If no modules require privileged or additional capabilities, uncomment the following
# line to improve the security of the device.
#
allow_elevated_docker_permissions: true

###############################################################################
# Certificate settings
###############################################################################
#
# Configures the certificates required to operate the IoT Edge runtime
# as a gateway, which enables external leaf devices to securely
# communicate with the Edge Hub.
#
# If these values are not specified, the certificates
# will be auto generated by the daemon. This is useful for quickstart scenarios
# but is not intended for production environments.
#
# Settings:
#     device_ca_cert   - Path of the file containing the device CA certificate and its chain.
#                        The value must be specified as a "file" URI.
#                        Eg "file:///var/secrets/device-ca.pem"
#     device_ca_pk     - Path of the file containing the private key of the device CA certificate.
#                        The value must be specified as a "file" URI.
#                        Eg "file:///var/secrets/device-ca.key.pem"
#     trusted_ca_certs - Path of the file containing the containing
#                        all the trusted CA certificates required for Edge module communication.
#                        Edge modules and leaf devices use the certificates in this file to trust
#                        the server certificate of the Edge Hub, so this file must contain
#                        at least the device CA certificate specified in `device_ca_cert` above.
#                        The value must be specified as a "file" URI.
#                        Eg "file:///var/secrets/trusted-cas.pem"
#     auto_generated_ca_lifetime_days -
#                        The lifetime of the auto-generated workload CA certificate.
#                        If device_ca_cert and device_ca_pk have not been set (quickstart mode),
#                        then this is also used for the lifetime of
#                        the auto-generated device CA certificate.
#                        Defaults to 90 days.
#
###############################################################################

# certificates:
#   device_ca_cert: "<ADD URI TO DEVICE CA CERTIFICATE HERE>"
#   device_ca_pk: "<ADD URI TO DEVICE CA PRIVATE KEY HERE>"
#   trusted_ca_certs: "<ADD URI TO TRUSTED CA CERTIFICATES HERE>"
#   auto_generated_ca_lifetime_days: 90

###############################################################################
# Edge Agent module spec
###############################################################################
#
# Configures the initial Edge Agent module.
#
# The daemon uses this definition to bootstrap the system. The Edge Agent can
# then update itself based on the Edge Agent module definition present in the
# deployment in IoT Hub.
#
# Settings:
#     name     - name of the edge agent module. Expected to be "edgeAgent".
#     type     - type of module. Always "docker".
#     env      - Any environment variable that needs to be set for edge agent module.
#     config   - type specific configuration for edge agent module.
#       image  - (docker) Modules require a docker image tag.
#       auth   - (docker) Modules may need authoriation to connect to container registry.
#
# Adding environment variables:
# replace "env: {}" with
#  env:
#    key: "value"
#
# Adding container registry authorization:
# replace "auth: {}" with
#    auth:
#      username: "username"
#      password: "password"
#      serveraddress: "serveraddress"
#
###############################################################################

agent:
  name: "edgeAgent"
  type: "docker"
  env: {}
  config:
    image: "mcr.microsoft.com/azureiotedge-agent:1.1"
    auth: {}

###############################################################################
# Watchdog settings
###############################################################################
#
# The IoT edge daemon has a watchdog that periodically checks the health of the
# Edge Agent module and restarts it if it's down.
#
# max_retries - Configures the number of retry attempts that the IoT edge daemon
#               should make for failed operations before failing with a fatal error.
#
#               If this configuration is not specified, the daemon keeps retrying
#               on errors and doesn't fail fatally.
#
#               On a fatal failure, the daemon returns an exit code which
#               signifies the kind of error encountered. Currently, the following
#               error codes are returned by the daemon -
#
#               150 - Invalid Device ID specified.
#               151 - Invalid IoT hub configuration.
#               152 - Invalid SAS token used to call IoT hub.
#                     This could signal an invalid SAS key.
#               1 - All other errors.
###############################################################################

#watchdog:
#  max_retries: 2

###############################################################################
# Connect settings
###############################################################################
#
#
# Configures URIs used by clients of the management and workload APIs
#     management_uri - used by the Edge Agent and 'iotedge' CLI to start,
#                      stop, and manage modules
#     workload_uri   - used by modules to retrieve tokens and certificates
#
# The following uri schemes are supported:
#     http - connect over TCP
#     unix - connect over Unix domain socket
#
###############################################################################

connect:
  management_uri: "unix:///run/iotedge-mgmt.sock"
  workload_uri: "unix:///run/iotedge-workload.sock"

###############################################################################
# Listen settings
###############################################################################
#
# Configures the listen addresses for the daemon.
#     management_uri - used by the Edge Agent and 'iotedge' CLI to start,
#                      stop, and manage modules
#     workload_uri   - used by modules to retrieve tokens and certificates
#
# The following uri schemes are supported:
#     http - listen over TCP
#     unix - listen over Unix domain socket
#     fd   - listen using systemd socket activation
#
# These values can be different from the connect URIs. For instance, when
# using the fd:// scheme for systemd:
#     listen address is fd://iotedge.workload,
#     connect address is unix:///var/run/iotedge/workload.sock
#
###############################################################################

listen:
  management_uri: "unix:///run/iotedge-mgmt.sock"
  workload_uri: "unix:///run/iotedge-workload.sock"

###############################################################################
# Moby Container Runtime settings
###############################################################################
#
# uri - configures the uri for the container runtime.
# network - configures the network on which the containers will be created.
#
# Additional container network configuration such as enabling IPv6 networking
# and providing the IPAM settings can be achieved by specifying the relevant
# configuration in the network settings.
#
# network:
#   name: "azure-iot-edge"
#   ipv6: true
#   ipam:
#     config:
#       -
#           gateway: '172.18.0.1'
#           subnet: '172.18.0.0/16'
#           ip_range: '172.18.0.0/16'
#       -
#           gateway: '2021:ffff:e0:3b1:1::1'
#           subnet: '2021:ffff:e0:3b1:1::/80'
#           ip_range: '2021:ffff:e0:3b1:1::/80'
###############################################################################

moby_runtime:
  uri: "unix:///var/run/docker.sock"
  # network: "azure-iot-edge"
  #
  # network:
  #   name: "azure-iot-edge"
  #   ipv6: true
  #   ipam:
  #     config:
  #       -
  #           gateway: '172.18.0.1'
  #           subnet: '172.18.0.0/16'
  #           ip_range: '172.18.0.0/16'
  #       -
  #           gateway: '2021:ffff:e0:3b1:1::1'
  #           subnet: '2021:ffff:e0:3b1:1::/80'
  #           ip_range: '2021:ffff:e0:3b1:1::/80'
